#!/usr/bin/env python3

"""
A script for rotating files based on a CSV file.

This script takes a CSV file as input, and rotates the files in the CSV file by the rotation factor specified in the CSV file.

The CSV file must have the following columns:
    - Folder: The folder in which the file to be rotated is located.
    - Filenumber: The filenumber of the file to be rotated.
    - Rotation: The rotation factor to rotate the file by (e.g. "90L" for 90 degrees counter-clockwise).

The CSV file must be passed as a command line argument to the script.

Usage: rotate <csv_file>
"""

import csv
import os
import sys
import subprocess
import concurrent.futures
from rich.progress import Progress, SpinnerColumn, TimeElapsedColumn, BarColumn
from colorama import Fore

def csv_to_dict(csv_file: str) -> list[dict]:
    """
    Converts a CSV file to a list of Python dictionaries.
    
    Args:
        csv_file (str): The path to the CSV file to be converted.
        
    Returns:
        list[dict]: A list of dictionaries, where each dictionary represents a row
                    from the CSV file with column names as keys and corresponding
                    row values as values.
    """
    # Open the CSV file and create a CSV reader that treats the first row as column names
    with open(csv_file, 'r', newline='') as file:
        reader = csv.DictReader(file)
        
        # Convert the CSV reader to a list of dictionaries and return it
        return list(reader)
    
def get_file_name(csv_row: dict) -> str:
    """
    From a CSV row, concatenate the "Folder" column and the "Filenumber", and append ".tif" to the result.

    Args:
        csv_row (dict): A dictionary representing a row from a CSV file.

    Returns:
        str: The file name, as described above. 
    """
    # Append ".tif" to the result of concatenating the "Folder" column and the "Filenumber" column
    return csv_row['Folder'] + csv_row['Filenumber'] + '.TIF'

def rotate_file(filepath: str, rotation_factor: str) -> None:
    """
    Rotates a file by the given rotation factor in-place.

    Args:
        filepath (str): The path to the file to be rotated.
        rotation_factor (str): The rotation factor to rotate the file by (e.g. "90L" for 90 degrees counter-clockwise).
    """
    # First convert the rotation factor to a number of degrees
    # Positive rotation factors are counter-clockwise (left), negative rotation factors are clockwise (right)
    rotation_factor = -int(rotation_factor[:-1]) if rotation_factor[-1] == 'L' else int(rotation_factor[:-1])

    # Then rotate the file by the given number of degrees
    # We use the ImageMagick convert command to do this
    
    # First, we construct the command to be executed
    # The command is of the form "convert <filepath> -rotate <rotation_factor> <filepath>"
    command = f'convert "{filepath}" -rotate {rotation_factor} "{filepath}"'
    # Run the command
    result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    # If there was an error, print it
    if result.stderr != b'':
        print(Fore.RED, f'Error rotating file {filepath}. Error: {result.stderr.decode("utf-8")}', Fore.RESET)

def main() -> None:
    """
    The main function of the script.
    
    This function is executed when the script is run from the command line.
    
    Returns:
        None
    """
    # First, we get the CSV file name from the command line arguments
    csv_file = sys.argv[1]

    # Then, we get the CSV rows from the CSV file
    csv_rows = csv_to_dict(csv_file)

    applicable_rows = [csv_row for csv_row in csv_rows if 'Split' not in csv_row['Rotation']]

    progress = Progress(
            "[progress.description]{task.description}",
            SpinnerColumn(),
            TimeElapsedColumn(),
            "[progress.percentage]{task.percentage:>3.0f}%",
            BarColumn(),
            "[progress.completed]{task.completed}/{task.total}"
        )

    with progress:
        task = progress.add_task("[cyan]Processing", total=len(applicable_rows))

        with concurrent.futures.ThreadPoolExecutor(max_workers=os.cpu_count()) as executor:
            futures = [executor.submit(rotate_file, get_file_name(row), row['Rotation']) for row in applicable_rows]

            for _ in concurrent.futures.as_completed(futures):
                progress.advance(task)

main()
